* All scripts should search the current directory and, if necessary, its parent
  directories for radish.json. The script should be executed from the directory
  where the file is found. It should display an error message, if the file
  cannot be found.
* The compile and generate-modules commands should be integrated into a
  continuous build system.
* Once there is an integrated, continous build system, run it in a process that
  also serves the game in development mode. This makes it possible to output
  status messages (e.g. compilation errors) in the browser.
* Create funtion that generates component, entity or system modules. The
  template should not contain any more logic than a call to that function. This
  way, the template doesn't need to be updated, if the specifics of the modules
  change. Component module (as an example) could look like this:
  def.component "componentName", [], ->
      ...
* Rename output/generated to generated-code.
* Move entity id generation into the framework. Entity factories should just
  return a map of components.
* Create some kind of global entry point that enables developers to perform
  debugging actions in a running game from the browsers JavaScript console.
  Use cases:
  - Creating an entity.
* Fix directory layout in tests directory. It should mirror the layout in the
  code directory.
* Replace current EntityUtil module with EntitySet. It has the following
  functions:
  - create: Creates an empty set of entities. This replaces the current manual
            creation of gameState.components.
  - add: Adds an entity to the set. The entity is a data structure as returned
         by an entity factory. Generates an id for the entity and returns it.
  - remove: Removes the entity with the given id from the set. Returns the
            entity object. This entity object resembles those returned by an
            entity factory. Thus, the entity can be added to another set.
  This module would improve the current state of things in the following ways:
  - Entity management is handled by this module and separated from entity
    creation.
  - Accessor funtions can be added, that make it easy to pass stuff to systems.
  - Set operations (union, intersection, ...) can be added, that make it easy to
    handle the relation between different sets (different levels, scenes,
    areas).
